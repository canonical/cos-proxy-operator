# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.
[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, static-{charm,lib}, unit

[vars]
src_path = {toxinidir}/src
tst_path = {toxinidir}/tests
lib_path = {toxinidir}/lib/charms/nrpe_exporter
all_path = {[vars]src_path} {[vars]tst_path} {[vars]lib_path}

[testenv]
basepython = python3
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  HOME
  PATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS
  HTTP_PROXY
  HTTPS_PROXY
  NO_PROXY

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    ruff
commands =
    ruff --fix {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    ruff
    codespell<2.3.0 # https://github.com/codespell-project/codespell/issues/3430
commands =
    codespell {[vars]lib_path}
    codespell .
    ruff {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:static-{charm,lib}]
description = Run static analysis checks
deps =
    pyright
    charm: -r{toxinidir}/requirements.txt
    lib: ops
    charm: responses==0.20.0
    charm: httpcore==0.14.7
commands =
    charm: pyright {[vars]src_path} {posargs}
    lib: pyright --pythonversion 3.10 {[vars]lib_path} {posargs}

[testenv:unit]
description = Run unit tests
deps =
    fs
    pytest
    coverage[toml]
    responses==0.20.0
    -r{toxinidir}/requirements.txt
    deepdiff
    httpcore==0.14.7
    cosl
commands =
    /usr/bin/env sh -c 'stat nrpe_exporter-amd64 > /dev/null 2>&1 || curl -L -O https://github.com/canonical/nrpe_exporter/releases/latest/download/nrpe_exporter-amd64'
    coverage run \
      --source={[vars]src_path},{[vars]lib_path} \
      -m pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/unit
    coverage report
allowlist_externals =
    /usr/bin/env

[testenv:integration]
description = Run integration tests

[testenv:scenario]
description = Run scenario tests
deps =
    pytest
    ops-scenario>=6
    coverage[toml]
    cosl
    -r{toxinidir}/requirements.txt
commands =
    coverage run \
      --source={[vars]src_path},{[vars]lib_path} \
      -m pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/scenario
    coverage report

[testenv:interface]
description = Run interface tests
deps =
    pytest
    ops-scenario>=6
    pytest-interface-tester
    cosl
    -r{toxinidir}/requirements.txt
commands =
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/interface
